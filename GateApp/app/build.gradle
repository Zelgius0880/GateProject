plugins {
    id ("com.android.application")
    id ("kotlin-android")
    id("kotlin-kapt")
    id("de.mannodermaus.android-junit5")
    id("com.google.gms.google-services")
}

android {
    compileSdkVersion (30)
    buildFeatures {
        // Enables Jetpack Compose for this module
        compose true
    }
    defaultConfig {
        applicationId ("com.zelgius.gateApp")
        minSdkVersion (28)
        targetSdkVersion (30)
        versionCode (1)
        versionName = "1.0"

        //testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        // 2) Connect JUnit 5 to the runner
        testInstrumentationRunnerArgument("runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder")
        signingConfig signingConfigs.debug
    }

    buildTypes {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        
        debug {

            buildConfigField("String", "AP_SSID", properties.getProperty("esp8266.ap.ssid") )
            buildConfigField("String", "AP_PASSWORD", properties.getProperty("esp8266.ap.password") )
        }

        release {
            minifyEnabled = false
            proguardFiles (getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")

            buildConfigField("String", "AP_SSID", properties.getProperty("esp8266.ap.ssid") )
            buildConfigField("String", "AP_PASSWORD", properties.getProperty("esp8266.ap.password") )
        }

    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }

    composeOptions {
        kotlinCompilerVersion '1.4.20'
        kotlinCompilerExtensionVersion '1.0.0-alpha08'
    }

    packagingOptions {
        exclude ("META-INF/DEPENDENCIES")
        exclude ("META-INF/LICENSE")
        exclude ("META-INF/LICENSE.txt")
        exclude ("META-INF/LICENSE.md")
        exclude ("META-INF/LICENSE-notice.md")
        exclude ("META-INF/license.txt")
        exclude ("META-INF/NOTICE")
        exclude ("META-INF/NOTICE.txt")
        exclude ("META-INF/notice.txt")
        exclude ("META-INF/ASL2.0")
        exclude("META-INF/*.kotlin_module")
    }

    testOptions {
        // 5) Configure JUnit 5, if necessary
        junitPlatform {
            // Configuration goes here!
        }
    }
}
// For Kotlin
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}



dependencies {

    implementation ("androidx.core:core-ktx:1.3.2")
    implementation ("androidx.appcompat:appcompat:1.2.0")
    implementation ("androidx.activity:activity-ktx:1.2.0-rc01")
    implementation ("androidx.fragment:fragment-ktx:1.3.0-rc01")
    implementation ("com.google.android.material:material:1.2.1")
    androidTestImplementation ("androidx.test.ext:junit:1.1.2")
    androidTestImplementation ("androidx.test.espresso:espresso-core:3.3.0")

    // Test
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.7.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.0")

    androidTestImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
    androidTestImplementation("org.junit.jupiter:junit-jupiter-params:5.7.0")
    androidTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.0")
    androidTestImplementation("de.mannodermaus.junit5:android-test-core:1.2.0")
    androidTestRuntimeOnly("de.mannodermaus.junit5:android-test-runner:1.2.0")

    androidTestImplementation("androidx.test:runner:1.3.0")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.3.0")
    androidTestImplementation ("androidx.arch.core:core-testing:2.1.0")
    androidTestImplementation ("androidx.test:rules:1.3.0")


    //KTX
    implementation ("androidx.lifecycle:lifecycle-runtime-ktx:2.2.0")
    implementation ("androidx.lifecycle:lifecycle-livedata-ktx:2.2.0")
    
    
    //COMPOSE
    def composeVersion = "1.0.0-alpha08"
    implementation ("androidx.compose.ui:ui:$composeVersion")
    // Tooling support (Previews, etc.)
    implementation ("androidx.compose.ui:ui-tooling:$composeVersion")
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation ("androidx.compose.foundation:foundation:$composeVersion")
    // Material Design
    implementation ("androidx.compose.material:material:$composeVersion")
    // Material design icons
    implementation ("androidx.compose.material:material-icons-core:$composeVersion")
    implementation ("androidx.compose.material:material-icons-extended:$composeVersion")
    // Integration with observables
    implementation ("androidx.compose.runtime:runtime-livedata:$composeVersion")
    implementation ("androidx.compose.runtime:runtime-rxjava2:$composeVersion")

    //Firebase
    implementation ("com.google.firebase:firebase-firestore-ktx:22.0.1")
    implementation ("com.google.firebase:firebase-auth:20.0.1")

}